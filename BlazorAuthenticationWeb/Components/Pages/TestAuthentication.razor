@page "/testauth"

@inject AuthenticationStateProvider _authenticationStateProvider;
@inject IServiceProvider _serviceProvider;
@inject Handlers.RoleHandler _roleHandler;

<PageTitle>TestAuthentication</PageTitle>

<h1>Authentication Test Page</h1>

@if (_isAuthenticated)
{
    <div>
        <h1>Hello, @_userName</h1>
    </div>

    <div>
        <button @onclick="async () => await MakeAdmin()">Make admin</button>
    </div>
}
else
{
    <div>
        You are not authenticated.
    </div>
}

@code {
    private bool _isAuthenticated;
    private bool _isAdmin;
    private string _userName;

    protected override async Task OnInitializedAsync()
    {
        // Get Authentication State
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        // Get current user
        var user = authState.User;

        _userName = user.Identity.Name;
        _isAuthenticated = user.Identity.IsAuthenticated;
        _isAdmin = user.IsInRole("Admin");

        if (_isAuthenticated)
            await _roleHandler.CreateUserRolesAsync(user.Identity.Name, "Admin", _serviceProvider);
    }

    public async Task MakeAdmin()
    {
        // var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // await _roleHandler.CreateUserRoles(_userName,"ADMIN",_serviceProvider);
    }
}
